{%- style -%}
      .sidebar-active{
        left:0;
      }
  .filter_inner svg path,.filter_btn_group svg path{
    fill:var(--global-font-color);
  }
    .sidebar{
      border-right:1px solid var(--global-border-color);
    }

       .sidebar-title{
        background-color:var(--body-background);
       }

     .collection-main input[type='range']::-webkit-slider-thumb {
      background-image:url('{{ 'icon-filter-thumb.png' | asset_url }}');
      background-size:contain;
      background-repeat:no-repeat;
     }

      @media screen and (max-width:1440px){
      .sidebar-active{
           width:250px;
        }
      }

      @media screen and (max-width:1200px){
        .sidebar{
          border:none;
           position:fixed;
           z-index:9999;
           left:0;
           top:0;
           width:100%;
           height:100%;
           opacity:0;
           visibility:hidden;
           background-color:#00000020;
        }
        #sidebar_inner{
          background-color:{{ section.settings.sidebar_bg }};
        }
        .sidebar-active{
          opacity:1;
          visibility:visible;
        }
        .collection-main aside{
          padding:0 !important;
       }
      }

       @media screen and (min-width:768px){
         .collection-main #collection_grid{
             {% case section.settings.items_per_row %}
               {% when "2" %}
                grid-template-columns:repeat(2,minmax(0,1fr));
               {% when "3" %}
                grid-template-columns:repeat(3,minmax(0,1fr));
               {% when "4" %}
                grid-template-columns:repeat(4,minmax(0,1fr));
                 {% else %}
             {% endcase %}
         }
       }
{%- endstyle -%}

<section class="collection-main border-t border-b global_border_color">
  <div class="{% if settings.container == 'boxed' %}container{% else %}container-fluid{% endif %} mx-auto flex">
    <aside
      id="collection_sidebar"
      class="sidebar sidebar-hidden overflow-auto scrollbar-none z-10 h-auto duration-500 ease-in-out flex-shrink-0"
      style="padding-top:{{ section.settings.padding_top }}px;padding-bottom:{{ section.settings.padding_bottom }}px;"
    >
      <div class="relative w-full md:w-[400px] z-10 p-[20px] xl:p-0" id="sidebar_inner">
        <div class="filter_inner flex flex-col gap-7 max-h-[700px] h-full overflow-auto lg:overflow-visible scrollbar-none lg:pr-10 pr-0">
          <div class="sidebar-title flex items-center justify-between w-full z-40 -mb-5">
            <p class="flex items-center gap-2 !text-lg font-semibold">
              {%- render 'icon-filter', class: 'w-5 h-5 stroke' -%}
              Filters
            </p>
            <button type="button" class="cursor-pointer" id="sidebar_close">
              {% render 'icon-close-thin', class: 'w-[20px] h-[20px]' %}
            </button>
          </div>
          <div
            class="pt-6"
            x-data="
                             {
                               loading: false,
                               filterCollection(event){
                                  let handle = event.target.getAttribute('data-handle')
                                  fetch('/collections/' + handle)
                     .then(response => response.text())
                     .then(data => {
                      let html_div = document.createElement('div');
                      html_div.innerHTML = data;
                      let html_dom = html_div.querySelector('#productGridContainer').innerHTML;
                      let html_banner = html_div.querySelector('#productBanner').innerHTML;
                      let html_filter = html_div.querySelector('#collection_filter_main').innerHTML;
                      let title = html_div.querySelector('#collectionTitle').innerHTML;
                      document.querySelector('header').setAttribute('class','w-full py-4 duration-150 ease-in-out sticky-header absolute top-0 z-[899]')
                      document.querySelector('#productGridContainer').innerHTML = html_dom;
                      document.querySelector('#productBanner').innerHTML = html_banner;
                      document.querySelector('#collection_filter_main').innerHTML = html_filter;
                      document.querySelector('#collectionTitle').innerHTML = title;
                      history.replaceState(null,null, '/collections/' + handle);
                      filterRange();
                      document.querySelectorAll('.filter-check-box').forEach(button => {
                        button.setAttribute('tabindex', 0)
                      });
                      filterButtonClick();
                      document.querySelectorAll('#productGridContainer .quick_view_btn').forEach((btn,index)=>{
               btn.addEventListener('click',(e)=>{
                 let quickViewModal = document.querySelector('#quickView')
               let product = btn.getAttribute('data-handle')
               if(product){
                   quickViewModal.classList.add('quickview_active')
                   quickView(product)
               }
               })
              })
                     })
                     .catch(error => console.log('Error:', error))
                     .finally(() => loading = false)
                               }
                             }
            "
          >
            {% render 'loader' %}
            <form
              name="filter-collection"
              id="filter_by_collection"
              class="relative z-10"
            >
              <fieldset>
                <legend class="flex items-center justify-between">
                  <div>
                    <span class="font-semibold">{{ 'main-collection.filter_collection' | t }}</span>
                  </div>
                </legend>

                <div>
                  <ul class="flex flex-col gap-[20px] my-[20px] flex-wrap">
                    {% for collection in collections %}
                      {% if collection.products.size > 0 %}
                        <li class="flex items-center gap-[20px] relative radio-filter">
                          <div class="filter-check-box">
                            <input
                              type="radio"
                              name="collection_filter"
                              @change="filterCollection($event)"
                              style="background-color:{{ block.settings.sidebar_bg_color }}"
                              value="{{ collection.url }}"
                              id="{{ collection.title }}"
                              data-handle="{{ collection.handle }}"
                            >
                            <span>{% render 'icon-check', class: 'w-[20px] h-[20px]' %}</span>
                          </div>
                          <label for="{{ collection.title }}">{{ collection.title }}</label>
                        </li>
                      {% endif %}
                    {% endfor %}
                  </ul>
                </div>
              </fieldset>
            </form>
          </div>
          {% render 'filter-options' %}
        </div>
      </div>
    </aside>
    <div
      class="flex flex-col gap-10 w-full lg:mb-5"
      style="padding-top:{{ section.settings.padding_top }}px;padding-bottom:{{ section.settings.padding_bottom }}px;"
    >
      <div class="flex flex-col">
        {% if collection.products.size > 0 %}
          <div class="flex items-center justify-between gap-[15px] filter_btn_group">
            <div class="flex items-center gap-3">
              <button
                type="button"
                id="collection_options"
                aria-controls="collection_sidebar"
                class="flex items-center gap-[10px] cursor-pointer font-semibold text-lg tracking-[1.5px] aria-hidden"
              >
                {%- render 'icon-filter', class: 'w-5 h-5 stroke' -%}
                {{- 'main-collection.filter' | t -}}
              </button>
              <p class="sm:text-left text-center hidden lg:block" id="collectionTitle">
                {{ collection.products_count }}
                {{ collection.products_count | pluralize: 'Product', 'Products' }}
              </p>
            </div>
            {% render 'sort-options' %}
          </div>
        {% else %}

        {% endif %}
      </div>
      <div id="productGridContainer">
        {% if collection.products.size > 0 %}
          {% paginate collection.products by section.settings.items_page %}
            <div
              class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-3 lg:gap-10 gap-8"
              id="collection_grid"
            >
              {% for product in collection.products %}
                {% render 'product-item', product: product %}
              {% endfor %}
            </div>
            <div class="lg:max-w-6xl mx-auto">
              {% render 'pagination', pagination: paginate %}
            </div>
          {% endpaginate %}
        {% else %}
          <div>
            <h3 class="text-center">{{ 'main-collection.no_products' | t }}</h3>
          </div>
        {% endif %}
      </div>
    </div>
  </div>
</section>

{% schema %}
{
  "name": "t:section.main-collection.name",
  "class": "section",
  "settings": [
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 10,
      "unit": "px",
      "label": "t:section.main-collection.settings.margin_top",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 10,
      "unit": "px",
      "label": "t:section.main-collection.settings.margin_bottom",
      "default": 0
    },
    {
      "type": "color",
      "id": "sidebar_bg",
      "label": "t:section.main-collection.settings.sidebar_bg",
      "default": "#fff"
    },
    {
      "type": "range",
      "id": "items_page",
      "label": "Items Per Page",
      "max": 20,
      "min": 2,
      "step": 1,
      "default": 12
    }
  ]
}
{% endschema %}

{% javascript %}
  let filterBtn = document.querySelector('#collection_options');
  let filterCloseBtn = document.querySelector('#sidebar_close');
  let sidebar = document.querySelector('#collection_sidebar');

  if (filterBtn != null) {
    filterBtn.addEventListener('click', () => {
      sidebar.classList.toggle('sidebar-active');
      filterBtn.classList.add('hidden');
    });

    window.addEventListener('keyup', (e) => {
      if (e.key == 'Escape') {
        sidebar.classList.remove('sidebar-active');
        filterBtn.classList.remove('hidden');
      }
    });
  }

  if (filterCloseBtn) {
    filterCloseBtn.addEventListener('click', () => {
      sidebar.classList.remove('sidebar-active');
      filterBtn.classList.remove('hidden');
    });
  }
{% endjavascript %}
